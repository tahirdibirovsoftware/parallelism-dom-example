export class Thread {
    static cache = [];
    static enableCaching = true;
    static configure(options) {
        Thread.enableCaching = options.enableCaching ?? true;
    }
    static exec(fn, ...args) {
        return new Promise((resolve, reject) => {
            if (Thread.enableCaching) {
                const cachedEntry = Thread.cache.find(entry => Thread.areArgsEqual(entry.args, args));
                if (cachedEntry) {
                    resolve(cachedEntry.result);
                    return;
                }
            }
            // Correctly referencing the compiled JS worker file
            const worker = new Worker(new URL('./worker.js', import.meta.url), { type: 'module' });
            worker.postMessage({ fn: fn.toString(), args });
            worker.onmessage = (event) => {
                const result = event.data;
                if (Thread.enableCaching) {
                    Thread.cache.push({ args, result });
                }
                resolve(result);
                worker.terminate();
            };
            worker.onerror = reject;
        });
    }
    static areArgsEqual(args1, args2) {
        return JSON.stringify(args1) === JSON.stringify(args2);
    }
}
