import { Thread } from './Thread';
export class ThreadPool {
    size;
    threads;
    constructor(options) {
        this.size = options.size;
        this.threads = Array.from({ length: this.size }, () => new Worker(new URL('./worker.js', import.meta.url), { type: 'module' }));
        Thread.configure({ enableCaching: options.enableCaching });
    }
    async exec(fn, ...args) {
        const availableThread = this.threads.pop();
        if (!availableThread) {
            throw new Error('No available threads in the pool');
        }
        try {
            return await Thread.exec(fn, ...args);
        }
        finally {
            this.threads.push(availableThread);
        }
    }
}
